// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  password            String
  dateOfBirth         DateTime          @map("date_of_birth")
  emailVerifyToken    String?           @map("email_verify_token")
  forgotPasswordToken String?           @map("forgot_password_token")
  verify              UserVerifyStatus? @default(Unverified)
  bio                 String?
  website             String?
  username            String?           @unique
  avatar              String?
  coverPhoto          String?           @map("cover_photo")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  RefreshToken RefreshToken[]

  followedBy Follower[] @relation("UserFollowers") // Users who follow this user
  following  Follower[] @relation("UserFollowing") // Users this user follows

  @@map("users")
}

model RefreshToken {
  id    String @id @default(uuid())
  token String @unique

  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "user_id")
  @@map("refresh_tokens")
}

model Follower {
  followerId String @map("follower_id")
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  followedUserId String @map("followed_user_id")
  followedUser   User   @relation("UserFollowers", fields: [followedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([followerId, followedUserId]) // Composite primary key
  @@map("followers")
}

enum UserVerifyStatus {
  Unverified
  Verified
  Banned
}
