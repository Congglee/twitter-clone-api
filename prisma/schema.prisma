// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  password            String
  dateOfBirth         DateTime          @map("date_of_birth")
  emailVerifyToken    String?           @map("email_verify_token")
  forgotPasswordToken String?           @map("forgot_password_token")
  verify              UserVerifyStatus? @default(Unverified)
  bio                 String?
  website             String?
  username            String?           @unique
  avatar              String?
  coverPhoto          String?           @map("cover_photo")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  RefreshToken RefreshToken[]
  followedBy   Follower[]     @relation("UserFollowers") // Users who follow this user
  following    Follower[]     @relation("UserFollowing") // Users this user follows
  Tweet        Tweet[]
  Mention      Mention[]
  Bookmark     Bookmark[]
  Like         Like[]

  // Implicit many-to-many self-relation for twitter_circle 
  twitterCircle   User[] @relation("TwitterCircle") // Users in this user's Twitter circle
  inTwitterCircle User[] @relation("TwitterCircle") // Users who have this user in their Twitter circle

  SentMessages     Conversation[] @relation("SentMessages") // Conversations this user has started
  ReceivedMessages Conversation[] @relation("ReceivedMessages") // Conversations this user has received

  NotificationTo   Notification[] @relation("NotificationTo") // Notifications sent to this user
  NotificationFrom Notification[] @relation("NotificationFrom") // Notifications sent from this user

  @@index([email, password], name: "email_password_idx")
  @@map("users")
}

model RefreshToken {
  id    String   @id @default(uuid())
  token String
  iat   DateTime // Need to convert Epoch time to Date
  exp   DateTime // Need to convert Epoch time to Date

  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token], name: "refresh_token_idx")
  @@map("refresh_tokens")
}

model Follower {
  followerId String @map("follower_id")
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  followedUserId String @map("followed_user_id")
  followedUser   User   @relation("UserFollowers", fields: [followedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([followerId, followedUserId]) // Composite primary key
  @@map("followers")
}

model Tweet {
  id         String        @id @default(uuid())
  type       TweetType
  audience   TweetAudience
  content    String
  guestViews Int           @default(0) @map("guest_views")
  userViews  Int           @default(0) @map("user_views")
  parentId   String?       @map("parent_id") // Only null for original tweets

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  Media        Media[]
  TweetHashTag TweetHashTag[]
  Mention      Mention[]
  Bookmark     Bookmark[]
  Like         Like[]
  Notification Notification[]

  @@map("tweets")
}

model HashTag {
  id   String @id @default(uuid())
  name String

  createdAt    DateTime       @default(now()) @map("created_at")
  TweetHashTag TweetHashTag[]

  @@map("hashtags")
}

// Should have used an implicit many-to-many relation for Tweet and HashTag
model TweetHashTag {
  tweetId String @map("tweet_id")
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  hashtagId String  @map("hashtag_id")
  hashtag   HashTag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([tweetId, hashtagId]) // Composite primary key
  @@map("tweet_hashtags")
}

model Mention {
  id String @id @default(uuid())

  mentionedUserId String @map("mentioned_user_id")
  mentionedUser   User   @relation(fields: [mentionedUserId], references: [id], onDelete: Cascade)

  tweetId String @map("tweet_id")
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([mentionedUserId, tweetId]) // Ensure a user can only be mentioned once in a tweet
  @@map("mentions")
}

model Media {
  id   String    @id @default(uuid())
  url  String
  type MediaType

  tweetId String @map("tweet_id")
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("medias")
}

model VideoStatus {
  id      String         @id @default(uuid())
  name    String
  status  EncodingStatus
  message String?

  createAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("updated_at")

  @@index([name], name: "video_status_name_idx")
  @@map("video_statuses")
}

model Bookmark {
  id      String @id @default(uuid())
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweetId String @map("tweet_id")
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, tweetId]) // Ensure a user can only bookmark a tweet once
  @@map("bookmarks")
}

model Like {
  id      String @id @default(uuid())
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweetId String @map("tweet_id")
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, tweetId]) // Ensure a user can only like a tweet once
  @@map("likes")
}

model Conversation {
  id         String @id @default(uuid())
  senderId   String @map("sender_id")
  receiverId String @map("receiver_id")
  content    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId], name: "sender_receiver_idx")
  @@map("conversations")
}

model Notification {
  id   String           @id @default(uuid())
  type NotificationType
  read Boolean          @default(false)

  // Who should receive this notification
  userId String @map("user_id")
  user   User   @relation("NotificationTo", fields: [userId], references: [id], onDelete: Cascade)

  // Who triggered this notification
  fromId String @map("from_id")
  from   User   @relation("NotificationFrom", fields: [fromId], references: [id], onDelete: Cascade)

  tweetId String? @map("tweet_id")
  tweet   Tweet?  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId, read]) // For querying unread notifications
  @@map("notifications")
}

enum UserVerifyStatus {
  Unverified
  Verified
  Banned
}

enum MediaType {
  Image
  Video
  HLS
}

enum EncodingStatus {
  Pending
  Processing
  Success
  Failed
}

enum TweetType {
  Tweet
  Retweet
  Comment
  QuoteTweet
}

enum TweetAudience {
  Everyone
  TwitterCircle
}

enum NotificationType {
  Like
  Retweet
  Comment
  Mention
  Follow
  QuoteTweet
}
